<script setup lang="ts">
import { onMounted, computed } from "vue";
import { useTaskStore } from "../../stores/taskStore";
import { useAuthStore } from "../../stores/authStore";
const authStore = useAuthStore();
const taskStore = useTaskStore();
const role = computed(() => authStore.loggedInUser?.role);

onMounted(async () => {
  if (role.value === "ADMIN") {
    await taskStore.getAllTasks();
  } else if (role.value === "MANAGER") {
    await taskStore.getManagerTasks();
  } else if (role.value === "USER") {
    await taskStore.getTasks();
  }
});


const statusTitles = {
  pending: "PENDING",
  inProgress: "IN_PROGRESS",
  completed: "COMPLETED",
  canceled: "CANCELED",
};

const statusOptions = [
  { value: "PENDING", label: "PENDING" },
  { value: "IN_PROGRESS", label: "IN_PROGRESS" },
  { value: "COMPLETED", label: "COMPLETED" },
  { value: "CANCELED", label: "CANCELED" },
];

const tasksByStatus = computed(() => ({
  pending: taskStore.tasks.filter((t) => t.status === "PENDING"),
  inProgress: taskStore.tasks.filter((t) => t.status === "IN_PROGRESS"),
  completed: taskStore.tasks.filter((t) => t.status === "COMPLETED"),
  canceled: taskStore.tasks.filter((t) => t.status === "CANCELED"),
}));

function canChangeStatus(currentStatus: string, newStatus: string): boolean {
  if (currentStatus === newStatus) return false;

  switch (currentStatus) {
    case "PENDING":
      return ["IN_PROGRESS", "COMPLETED", "CANCELED"].includes(newStatus);
    case "IN_PROGRESS":
      return ["COMPLETED", "CANCELED"].includes(newStatus);
    case "COMPLETED":
    case "CANCELED":
      return false;
    default:
      return false;
  }
}


async function changeStatus(task, newStatus) {
  if (task.status === newStatus) return;

  if (!canChangeStatus(task.status, newStatus)) {
    alert(`Cannot change status from ${task.status} to ${newStatus}`);
    return;
  }

  try {
    const updatedTask = { ...task, status: newStatus };
    await taskStore.updateTaskStatus(task.id, newStatus);
    await taskStore.getTasks();
  } catch (error) {
    console.error(error);
    alert("Failed to update task status");
  }
}
</script>

<template>
  <!-- ADMIN VIEW -->
  <div v-if="role === 'ADMIN'" class="container mt-4">
    <h2 class="mb-3">All Tasks</h2>
    <ul class="list-group">
      <li v-for="task in taskStore.tasks" :key="task.id" class="list-group-item d-flex justify-content-between">
        <div>
          <router-link :to="{ name: 'view-task', params: { id: task.id } }">
            {{ task.title }}
          </router-link>
          <br />
          <small class="text-muted">Assigned to: {{ task.assignedTo?.username || "Unassigned" }}</small>
          <br />
          <small class="text-muted">Status: {{ task.status }}</small>
        </div>
      </li>
    </ul>
  </div>

  <!-- MANAGER VIEW -->
  <div v-else-if="role === 'MANAGER'" class="container mt-4">
    <h2 class="mb-3">Tasks You Created</h2>
    <div class="row">
      <div class="col-md-3" v-for="(tasks, statusKey) in tasksByStatus" :key="statusKey">
        <h4>{{ statusTitles[statusKey] }}</h4>
        <ul class="list-group">
          <li v-if="tasks.length === 0" class="list-group-item text-muted">
            No {{ statusTitles[statusKey].toLowerCase() }} tasks
          </li>
          <li
              v-for="task in tasks"
              :key="task.id"
              class="list-group-item d-flex justify-content-between align-items-center"
          >
            <div class="d-flex flex-column">
              <router-link :to="{ name: 'view-task', params: { id: task.id } }" class="text-decoration-none fw-bold">
                {{ task.title }}
              </router-link>
              <small class="text-muted">{{ task.assignedTo?.username || "Unassigned" }}</small>
            </div>
            <!-- Allow manager to change status -->
            <select
                class="form-select form-select-sm w-auto ms-2"
                :value="task.status"
                @change="changeStatus(task, $event.target.value)"
            >
              <option
                  v-for="statusOption in statusOptions"
                  :key="statusOption.value"
                  :value="statusOption.value"
                  :disabled="!canChangeStatus(task.status, statusOption.value)"
              >
                {{ statusOption.label }}
              </option>
            </select>
          </li>
        </ul>
      </div>
    </div>
  </div>

  <!-- USER VIEW -->
  <div v-else-if="role === 'USER'" class="container mt-4">
    <h2 class="mb-3">Tasks Assigned to You</h2>
    <div class="row">
      <div class="col-md-3" v-for="(tasks, statusKey) in tasksByStatus" :key="statusKey">
        <h4>{{ statusTitles[statusKey] }}</h4>
        <ul class="list-group">
          <li v-if="tasks.length === 0" class="list-group-item text-muted">
            No {{ statusTitles[statusKey].toLowerCase() }} tasks
          </li>
          <li
              v-for="task in tasks"
              :key="task.id"
              class="list-group-item d-flex justify-content-between align-items-center"
          >
            <div class="d-flex flex-column">
              <router-link :to="{ name: 'view-task', params: { id: task.id } }" class="text-decoration-none fw-bold">
                {{ task.title }}
              </router-link>
              <small class="text-muted">{{ task.assignedTo?.username || "Unassigned" }}</small>
            </div>
            <!-- No status changing for USER -->
          </li>
        </ul>
      </div>
    </div>
  </div>
</template>


<style scoped>
h4 {
  margin-bottom: 15px;
}
</style>
