<script setup lang="ts">
import { reactive, ref, onMounted } from "vue";
import AppButton from "../ui/AppButton.vue";
import { useRoute, useRouter } from "vue-router";
import { useTaskStore } from "../../stores/taskStore";

const taskStore = useTaskStore();
const route = useRoute();
const router = useRouter();

const task = reactive({
  id: '',
  title: '',
  description: '',
  deadline: '',
  priority: '',
  createdBy: {
    name: '',
    email: '',
  },
  username: '',
});

const errors = reactive({
  title: '',
  description: '',
  deadline: '',
  priority: '',
  username: '',
});

const isLoading = ref(false);
const successMessage = ref('');
const priorities = ['Low', 'Medium', 'High'];

const validateForm = () => {
  let isValid = true;

  if (!task.title) {
    errors.title = 'Title is required';
    isValid = false;
  } else {
    errors.title = '';
  }

  if (!task.description) {
    errors.description = 'Description is required';
    isValid = false;
  } else {
    errors.description = '';
  }

  if (!task.deadline) {
    errors.deadline = 'Deadline is required';
    isValid = false;
  } else {
    errors.deadline = '';
  }

  if (!task.priority) {
    errors.priority = 'Priority is required';
    isValid = false;
  } else {
    errors.priority = '';
  }

  if (!task.username) {
    errors.username = 'Username is required';
    isValid = false;
  } else {
    errors.username = '';
  }

  return isValid;
};

const loadTask = async () => {
  isLoading.value = true;
  try {
    const taskId = Number(route.params.id);
    const response = await taskStore.getTaskById(taskId);

    if (response != null) {
      Object.assign(task, response); // Prefills task with existing data
    } else {
      console.error('Task not found');
    }

  } catch (error) {
    console.error('Failed to load task:', error);
  } finally {
    isLoading.value = false;
  }
};

const submitForm = async () => {
  if (!validateForm()) {
    return;
  }

  isLoading.value = true;
  successMessage.value = '';

  try {
    await taskStore.updateTask(task); // Sends full updated task
    successMessage.value = 'Task updated successfully! Redirecting...';

    setTimeout(() => {
      router.push({ name: 'TaskList' });
    }, 1500);

  } catch (error) {
    console.error('Failed to update task:', error);
  } finally {
    isLoading.value = false;
  }
};

onMounted(() => {
  loadTask();
});
</script>

<template>
  <div class="container mt-4">
    <h2 class="mb-4">Update Task</h2>
    <form @submit.prevent="submitForm" novalidate>
      <div class="mb-3">
        <label for="title" class="form-label">Title:</label>
        <input
            type="text"
            id="title"
            v-model="task.title"
            :class="['form-control', errors.title ? 'is-invalid' : '']"
            placeholder="Enter task title"
            required
